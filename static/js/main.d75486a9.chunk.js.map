{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","Helpers/getSexParam.ts","Helpers/getSexType.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","Helpers/getParent.tsx","components/PeopleTable.tsx","api.ts","Helpers/getVisiblePeople.ts","components/PeoplePage.tsx","index.tsx"],"names":["getIsActive","isActive","cn","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","getSexParam","filterType","newParam","sex","getSexType","PeopleFilters","setSearchParams","get","centuries","getAll","map","type","placeholder","onChange","event","target","length","century","includes","filter","c","Loader","getParent","person","parentType","people","parentTypeName","foundPerson","personName","find","name","isPersonExistInList","slug","PeopleTable","visiblePeople","personId","sort","order","toggleSort","column","toLowerCase","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","useParams","errorMessage","setErrorMessage","isPeopleLoading","setIsPeopleLoading","query","copiePeople","Math","ceil","normalizedQuery","trim","motherName","fatherName","person1","person2","localeCompare","getVisiblePeople","loadPeople","peopleData","useEffect","createRoot","document","getElementById","render","path","element","replace","index"],"mappings":"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","file":"static/js/main.d75486a9.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getIsActive = ({\n  isActive,\n}: { isActive: boolean }) => (cn('navbar-item', {\n  'has-background-grey-lighter': isActive,\n}));\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getIsActive}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getIsActive}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const getSexParam = (filterType: string) => {\n  let newParam = {};\n\n  if (filterType === 'All') {\n    newParam = { sex: null };\n  }\n\n  if (filterType === 'Male') {\n    newParam = { sex: 'm' };\n  }\n\n  if (filterType === 'Female') {\n    newParam = { sex: 'f' };\n  }\n\n  return newParam;\n};\n","export const getSexType = (filterType: string, sex: string) => {\n  switch (filterType) {\n    case 'All':\n      return sex === '';\n    case 'Male':\n      return sex === 'm';\n    case 'Female':\n      return sex === 'f';\n    default:\n      return '';\n  }\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSexParam } from '../Helpers/getSexParam';\nimport { getSexType } from '../Helpers/getSexType';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const arrayOfCenturies: string[] = ['16', '17', '18', '19', '20'];\n  const arayOfFilterType: string[] = ['All', 'Male', 'Female'];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('query', event.target.value);\n\n    if (event.target.value.length === 0) {\n      params.delete('query');\n    }\n\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {arayOfFilterType.map(filterType => (\n          <SearchLink\n            className={cn({\n              'is-active': getSexType(filterType, sex),\n            })}\n            params={getSexParam(filterType)}\n          >\n            {filterType}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {arrayOfCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(`${century}`),\n                })}\n                params={{\n                  centuries: centuries.includes(`${century}`)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ centuries: [], sex: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\nconst isPersonExistInList = (personName: string | null, people: Person[]) => {\n  return people.find(person => person.name === personName);\n};\n\nexport const getParent = (\n  person: Person,\n  parentType: 'father' | 'mother',\n  people: Person[],\n) => {\n  const parentTypeName = parentType === 'mother'\n    ? 'motherName'\n    : 'fatherName';\n\n  if (!person[parentTypeName]) {\n    return <td>-</td>;\n  }\n\n  const foundPerson = isPersonExistInList(person[parentTypeName], people);\n\n  if (foundPerson) {\n    return (\n      <td>\n        <Link\n          className={cn({\n            'has-text-danger': foundPerson.sex === 'f',\n          })}\n          to={`/people/${foundPerson.slug}`}\n        >\n          {foundPerson.name}\n        </Link>\n      </td>\n    );\n  }\n\n  return (\n    <td>\n      {person[parentTypeName]}\n    </td>\n  );\n};\n","import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { getParent } from '../Helpers/getParent';\n\ninterface Props {\n  visiblePeople: Person[],\n  personId?: string,\n  people: Person[],\n}\n\nexport const PeopleTable: React.FC<Props> = ({\n  visiblePeople,\n  personId,\n  people,\n}) => {\n  const [searchParams] = useSearchParams();\n\n  const filteringType = ['Name', 'Sex', 'Born', 'Died'];\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const toggleSort = (column: string) => {\n    let newParams = {};\n\n    if (!sort || (sort && sort !== column)) {\n      newParams = { sort: column, order: null };\n    }\n\n    if (!order && sort === column) {\n      newParams = { sort: column, order: 'desc' };\n    }\n\n    if (sort && sort === column && order) {\n      newParams = { sort: null, order: null };\n    }\n\n    return newParams;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {filteringType.map(column => (\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {column}\n                <SearchLink\n                  params={toggleSort(column.toLowerCase())}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('fas', {\n                      'fa-sort': sort !== column,\n                      'fa-sort-up': sort === column.toLowerCase() && !order,\n                      'fa-sort-down': sort\n                        && order && sort === column.toLowerCase(),\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      {visiblePeople.map(person => (\n        <tbody\n          key={person.slug}\n        >\n          <tr\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning':\n                person.slug === personId,\n            })}\n          >\n            <td>\n              <Link\n                to={`/people/${person.slug}`}\n                className={cn({\n                  'has-text-danger': person.sex === 'f',\n                })}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            {getParent(person, 'mother', people)}\n            {getParent(person, 'father', people)}\n          </tr>\n        </tbody>\n      ))}\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const getVisiblePeople = (\n  people: Person[], {\n    sex, centuries, query, sort, order,\n  }: {\n    sex: string,\n    centuries: string[],\n    query: string,\n    sort: string | null,\n    order: string | null,\n  },\n) => {\n  let copiePeople = [...people];\n\n  if (sex) {\n    copiePeople = copiePeople.filter(person => {\n      switch (sex) {\n        case 'm':\n          return person.sex === 'm';\n        case 'f':\n          return person.sex === 'f';\n        case '':\n        default:\n          return copiePeople;\n      }\n    });\n  }\n\n  if (centuries.length > 0) {\n    copiePeople = copiePeople.filter(person => {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    copiePeople = copiePeople.filter(person => {\n      return person.name.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery);\n    });\n  }\n\n  if (sort) {\n    copiePeople = copiePeople.sort((person1, person2): number => {\n      switch (sort) {\n        case 'name':\n          return order\n            ? person2.name.localeCompare(person1.name)\n            : person1.name.localeCompare(person2.name);\n        case 'sex':\n          return order\n            ? person2.sex.localeCompare(person1.sex)\n            : person1.sex.localeCompare(person2.sex);\n        case 'born':\n          return order\n            ? person2.born - person1.born\n            : person1.born - person2.born;\n        case 'died':\n          return order\n            ? person2.died - person1.died\n            : person1.died - person2.died;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return copiePeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getVisiblePeople } from '../Helpers/getVisiblePeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const { personId } = useParams();\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [isPeopleLoading, setIsPeopleLoading] = useState(true);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const visiblePeople = getVisiblePeople(people, {\n    sex, centuries, query, sort, order,\n  });\n\n  const loadPeople = async () => {\n    setIsPeopleLoading(true);\n\n    try {\n      const peopleData = await getPeople();\n\n      setPeople(peopleData);\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setIsPeopleLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {people && !isPeopleLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isPeopleLoading && (<Loader />)}\n\n              {errorMessage && !isPeopleLoading && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {people.length === 0 && !isPeopleLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {visiblePeople.length === 0 && !isPeopleLoading && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!isPeopleLoading && visiblePeople.length > 0 && (\n                <PeopleTable\n                  visiblePeople={visiblePeople}\n                  people={people}\n                  personId={personId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route\n            path=\"people/:personId?\"\n            element={<PeoplePage />}\n          />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}
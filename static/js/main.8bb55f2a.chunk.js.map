{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","index.tsx"],"names":["getIsActive","isActive","cn","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","getFilterLinkClass","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","sex","get","centuries","getAll","type","placeholder","onChange","event","target","length","map","century","includes","filter","c","href","Loader","PeopleTable","people","personId","sort","order","toggleSort","column","getParent","person","parentType","parentTypeName","fatherName","motherName","foundPerson","find","name","slug","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","useParams","errorMessage","setErrorMessage","isPeopleLoading","setIsPeopleLoading","visiblePeople","query","copiePeople","Math","ceil","normalizedQuery","toLowerCase","trim","person1","person2","localeCompare","getVisiblePeople","loadPeople","peopleData","useEffect","createRoot","document","getElementById","render","path","element","replace","index"],"mappings":"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","file":"static/js/main.8bb55f2a.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getIsActive = ({\n  isActive,\n}: { isActive: boolean }) => (cn('navbar-item', {\n  'has-background-grey-lighter': isActive,\n}));\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getIsActive}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getIsActive}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import cn from 'classnames';\nimport { LinkProps, NavLink, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nconst getFilterLinkClass = ({\n  isActive,\n}: { isActive: boolean }) => cn({\n  'is-active': isActive,\n});\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <NavLink\n      className={getFilterLinkClass}\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </NavLink>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const arrayOfCenturies: string[] = ['16', '17', '18', '19', '20'];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('query', event.target.value);\n\n    if (event.target.value.length === 0) {\n      params.delete('query');\n    }\n\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({\n            'is-active': sex === '',\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({\n            'is-active': sex === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({\n            'is-active': sex === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {arrayOfCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(`${century}`),\n                })}\n                params={{\n                  centuries: centuries.includes(`${century}`)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ninterface Props {\n  people: Person[],\n  personId?: string,\n}\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  personId,\n}) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const toggleSort = (column: string) => {\n    let newParams = {};\n\n    if (!sort) {\n      newParams = { sort: column, order: null };\n    }\n\n    if (!order && sort === column) {\n      newParams = { sort: column, order: 'desc' };\n    }\n\n    if (sort && sort !== column) {\n      newParams = { sort: column, order: null };\n    }\n\n    if (sort && sort === column && order) {\n      newParams = { sort: null, order: null };\n    }\n\n    return newParams;\n  };\n\n  const isMotherExistInList = (motherName?: string | null) => {\n    return people.find(person => person.name === motherName);\n  };\n\n  const isFatherExistInList = (fatherName?: string | null) => {\n    return people.find(person => person.name === fatherName);\n  };\n\n  const getParent = (person: Person, parentType: 'father' | 'mother') => {\n    const parentTypeName = parentType === 'mother'\n      ? 'motherName'\n      : 'fatherName';\n\n    if (!person[parentTypeName]) {\n      return <td>-</td>;\n    }\n\n    const foundPerson = parentType === 'mother'\n      ? isMotherExistInList(person[parentTypeName])\n      : isFatherExistInList(person[parentTypeName]);\n\n    if (foundPerson) {\n      return (\n        <td>\n          <Link\n            className={cn({\n              'has-text-danger': foundPerson.sex === 'f',\n            })}\n            to={`/people/${foundPerson.slug}`}\n          >\n            {foundPerson.name}\n          </Link>\n        </td>\n      );\n    }\n\n    return (\n      <td>\n        {person[parentTypeName]}\n      </td>\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={toggleSort('name')}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={toggleSort('sex')}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={toggleSort('born')}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={toggleSort('died')}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      {people.map(person => (\n        <tbody\n          key={person.slug}\n        >\n          <tr\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning':\n                person.slug === personId,\n            })}\n          >\n            <td>\n              <Link\n                to={`/people/${person.slug}`}\n                className={cn({\n                  'has-text-danger': person.sex === 'f',\n                })}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            {/* <td>{person.mother ? (\n              <Link\n                to={`/people/${person.mother.slug}`}\n                className={cn({\n                  'has-text-danger': person.mother.sex === 'f',\n                })}\n              />\n            )\n              : person.motherName}\n            </td>\n            <td>{person.father ?\n              <Link to={`/people/${person.father.slug}`} /> : person.fatherName}\n            </td> */}\n            {getParent(person, 'mother')}\n            {getParent(person, 'father')}\n          </tr>\n        </tbody>\n      ))}\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nconst getVisiblePeople = (\n  people: Person[], {\n    sex, centuries, query, sort, order,\n  }: {\n    sex: string,\n    centuries: string[],\n    query: string,\n    sort: string | null,\n    order: string | null,\n  },\n) => {\n  let copiePeople = [...people];\n\n  if (sex) {\n    copiePeople = copiePeople.filter(person => {\n      switch (sex) {\n        case 'm':\n          return person.sex === 'm';\n        case 'f':\n          return person.sex === 'f';\n        case '':\n        default:\n          return copiePeople;\n      }\n    });\n  }\n\n  if (centuries.length > 0) {\n    copiePeople = copiePeople.filter(person => {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    copiePeople = copiePeople.filter(person => {\n      return person.name.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery);\n    });\n  }\n\n  if (sort) {\n    copiePeople = copiePeople.sort((person1, person2): number => {\n      switch (sort) {\n        case 'name':\n          return order\n            ? person2.name.localeCompare(person1.name)\n            : person1.name.localeCompare(person2.name);\n        case 'sex':\n          return order\n            ? person2.sex.localeCompare(person1.sex)\n            : person1.sex.localeCompare(person2.sex);\n        case 'born':\n          return order\n            ? person2.born - person1.born\n            : person1.born - person2.born;\n        case 'died':\n          return order\n            ? person2.died - person1.died\n            : person1.died - person2.died;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return copiePeople;\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const { personId } = useParams();\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [isPeopleLoading, setIsPeopleLoading] = useState(true);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const visiblePeople = getVisiblePeople(people, {\n    sex, centuries, query, sort, order,\n  });\n\n  const loadPeople = async () => {\n    setIsPeopleLoading(true);\n\n    try {\n      const peopleData = await getPeople();\n\n      setPeople(peopleData);\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setIsPeopleLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {people && !isPeopleLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isPeopleLoading && (<Loader />)}\n\n              {errorMessage && !isPeopleLoading && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {people.length === 0 && !isPeopleLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {visiblePeople.length === 0 && !isPeopleLoading && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!isPeopleLoading && visiblePeople.length > 0 && (\n                <PeopleTable\n                  people={visiblePeople}\n                  personId={personId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route\n            path=\"people/:personId?\"\n            element={<PeoplePage />}\n          />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}